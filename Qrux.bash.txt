#!/bin/bash

# Path to the data log file
log_file="/var/www/html/data.log"

# Path to the log file where results will be logged
log_file_krux="/var/www/html/krux.log"

# Define the expected meeting interval (in minutes)
Meeting_Interval=35

# Function to display performance and bag combined (Menu 1)
show_performance_and_bag() {
    # Prepare the log separator and timestamp
    log_separator="-----------------------------"
    log_timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    # Print header
    echo "$log_separator" | tee -a "$log_file_krux"
    echo "Performance and Bag Check - $log_timestamp" | tee -a "$log_file_krux"
    echo "$log_separator" | tee -a "$log_file_krux"

    # Print table headers
    echo -e "Peer ID                                         | QUIL per Hour |          30 Days:       |  ΔQ/h  |       QuilBAG         | Wellness |   Time   " | tee -a "$log_file_krux"
    echo "---------------------------------------------------------------------------------------------------------------------------" | tee -a "$log_file_krux"

    # Use awk to process the log file and calculate totals
    awk -v meeting_interval="$Meeting_Interval" '
    {
        peer_id = $3;
        unclaimed_quil = $4;
        quil_per_hour = $5;
        timestamp = $1 " " $2;

        # Convert timestamp to epoch time for easier comparison
        command = "date -d \"" timestamp "\" +%s";
        command | getline epoch_time;
        close(command);

        # Store the current quil_per_hour, unclaimed_quil, and timestamp for comparison
        if (peer_id in last_quil_per_hour) {
            previous_quil_per_hour[peer_id] = last_quil_per_hour[peer_id];
        }
        last_quil_per_hour[peer_id] = quil_per_hour;
        last_unclaimed_quil[peer_id] = unclaimed_quil;
        last_timestamp[peer_id] = epoch_time;
        last_line[peer_id] = $0;

        # Update the most recent timestamp
        if (epoch_time > latest_timestamp) {
            latest_timestamp = epoch_time;
            latest_peer_id = peer_id;
        }
    }
    END {
        total_quil_per_hour = 0;
        total_quil_per_month = 0;
        total_unclaimed_quil = 0;
        total_percentage_change = 0;
        count_percentage_changes = 0;
        failed_wellness_check = 0;

        # Calculate the current time
        command = "date +%s";
        command | getline current_time;
        close(command);

        for (peer_id in last_quil_per_hour) {
            # Extract the last line for this peer_id
            split(last_line[peer_id], fields, " ");
            quil_per_hour = fields[5];
            quil_per_month = quil_per_hour * 24 * 30;
            unclaimed_quil = last_unclaimed_quil[peer_id];
            
            total_quil_per_hour += quil_per_hour;
            total_quil_per_month += quil_per_month;
            total_unclaimed_quil += unclaimed_quil;

            # Calculate the percentage change
            if (peer_id in previous_quil_per_hour) {
                prev_quil = previous_quil_per_hour[peer_id];
                change_in_quil_per_hour = ((quil_per_hour - prev_quil) / prev_quil) * 100;
                total_percentage_change += change_in_quil_per_hour;
                count_percentage_changes++;
                change_str = sprintf("%.2f%%", change_in_quil_per_hour);
            } else {
                change_str = "-";
            }

            # Calculate the wellness check
            time_difference = (current_time - last_timestamp[peer_id]) / 60; # time difference in minutes
            if (time_difference <= meeting_interval) {
                wellness_check = "✅";
            } else {
                wellness_check = "⚠️";
                failed_wellness_check = 1;  # Mark that there was a failure
                failed_peers[peer_id] = peer_id;  # Store the ID of failed peers
            }

            # Format time difference
            time_str = sprintf("%.2f mins", time_difference);

            # Print and log the result
            output = sprintf("%-44s | %13.10f | %22.10f | %-6s | %22.10f | %8s | %9s |\n", peer_id, quil_per_hour, quil_per_month, change_str, unclaimed_quil, wellness_check, time_str);
            printf "%s", output;
            printf "%s", output >> "'"$log_file_krux"'";
        }

        # Calculate average percentage change if there were any changes
        if (count_percentage_changes > 0) {
            average_percentage_change = total_percentage_change / count_percentage_changes;
        } else {
            average_percentage_change = 0;
        }

        # Print the totals
        output = sprintf("---------------------------------------------------------------------------------------------------------------------------\n");
        printf "%s", output;
        printf "%s", output >> "'"$log_file_krux"'";

        output_total = sprintf("%-44s | %13.10f | %22.10f | %6.2f%% | %22.10f | %8s | %9s |\n", "Total", total_quil_per_hour, total_quil_per_month, average_percentage_change, total_unclaimed_quil, "-", "-");
        printf "%s", output_total;
        printf "%s", output_total >> "'"$log_file_krux"'";

        # Output the failed peers if any
        if (failed_wellness_check == 1) {
            printf "\n⚠️ Failed Wellness Check:\n";
            print "\n⚠️ Failed Wellness Check:\n" >> "'"$log_file_krux"'";
            for (peer_id in failed_peers) {
                print peer_id;
                print peer_id >> "'"$log_file_krux"'";
            }
            print "\nCHECK: FAILED\n";
            print "\nCHECK: FAILED\n" >> "'"$log_file_krux"'";
        } else {
            print "\nCHECK: PASSED\n";
            print "\nCHECK: PASSED\n" >> "'"$log_file_krux"'";
        }
    }
    ' "$log_file"

    # Log the end of the performance check
    echo "$log_separator" | tee -a "$log_file_krux"
}

# Main script execution
if [[ "$1" == "show_performance_and_bag" ]]; then
    show_performance_and_bag
else
    while true; do
        clear
        echo "1. Performance & Bag"
        echo "2. Exit"

        read -p "Choose an option: " choice

        case "$choice" in
            1)
                show_performance_and_bag
                ;;
            2)
                exit 0
                ;;
            *)
                echo "Invalid choice. Please try again."
                ;;
        esac

        read -p "Press Enter to continue..."
    done
fi
