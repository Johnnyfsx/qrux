#!/bin/bash

# Function to display the menu
show_menu() {
    echo "========================"
    echo "  STATPLANE - Schedule Upload Time to Master"
    echo "========================"
    echo "1. Set Interval"
    echo "2. Stop Cron Job"
    echo "3. Show Current Cron Job Interval"
    echo "4. Show Time Until Next Execution"
    echo "5. Exit"
    echo "========================"
    echo "Additional Info: cat /var/log/fly_bash.log"
    echo "========================"
    echo -n "Choose an option [1-5]: "
}

# Function to set the interval and update the cron job
set_interval() {
    local interval=$1
    if [[ ! $interval =~ ^[0-9]+$ ]] || [[ $interval -lt 1 ]]; then
        echo "Invalid interval. Please enter a positive integer."
        return
    fi
    update_cron_job "$interval"
}

# Function to update the cron job with the specified interval
update_cron_job() {
    local interval=$1
    local cronjob="*/$interval * * * * /root/fly.bash >> /var/log/fly_bash.log 2>&1"
    crontab -l | grep -v '/root/fly.bash' > /tmp/crontab.tmp
    echo "$cronjob" >> /tmp/crontab.tmp
    crontab /tmp/crontab.tmp
    rm /tmp/crontab.tmp
    echo "Cron job updated to run every $interval minutes."
}

# Function to stop the cron job
stop_cron_job() {
    crontab -l | grep -v '/root/fly.bash' > /tmp/crontab.tmp
    crontab /tmp/crontab.tmp
    rm /tmp/crontab.tmp
    echo "Cron job for /root/fly.bash has been removed."
}

# Function to show the current cron job interval
show_current_cron_interval() {
    echo "Current cron job interval for /root/fly.bash:"
    crontab -l | grep '/root/fly.bash' | awk -F ' ' '{print $1}' | awk -F '/' '{print "Every " $2 " minutes"}'
}

# Function to show time until the next cron job execution
show_time_until_next_execution() {
    current_time=$(date +%s)
    interval=$(crontab -l | grep '/root/fly.bash' | awk -F ' ' '{print $1}' | awk -F '/' '{print $2}')

    if [[ -z $interval ]]; then
        echo "No cron job found for /root/fly.bash. Please set an interval first."
        return
    fi

    last_execution_time=$(( (current_time / (interval * 60)) * (interval * 60) ))
    next_execution_time=$(( last_execution_time + (interval * 60) ))
    time_left=$(( next_execution_time - current_time ))
    time_left_formatted=$(printf '%02d:%02d:%02d' $((time_left / 3600)) $(( (time_left % 3600) / 60 )) $((time_left % 60)))

    echo "Time until next execution: $time_left_formatted (HH:MM:SS)"
}

# Main script logic
while true; do
    show_menu
    read -r choice
    case $choice in
        1)
            read -p "Enter the interval in minutes: " interval
            set_interval "$interval"
            ;;
        2)
            stop_cron_job
            ;;
        3)
            show_current_cron_interval
            ;;
        4)
            show_time_until_next_execution
            ;;
        5)
            echo "Exiting..."
            exit 0
            ;;
        *)
            echo "Invalid option. Please choose a number between 1 and 5."
            ;;
    esac
done
